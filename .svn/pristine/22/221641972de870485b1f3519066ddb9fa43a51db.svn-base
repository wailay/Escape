/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Entities;

import Graphique.AnimationLoader;
import Graphique.Item.Item;
import Level.LevelManager;
import Level.Map;
import Level.Prison.PrisonMap;
import Sound.SoundLoader;
import States.Inventaire;
import org.newdawn.slick.Animation;
import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;

import org.newdawn.slick.SlickException;
import org.newdawn.slick.SpriteSheet;
import org.newdawn.slick.geom.Rectangle;
import org.newdawn.slick.geom.Circle;
import org.newdawn.slick.tiled.TiledMap;

/**
 *
 * @author wail
 */
public class Player extends Entity {
    
    
    
    private float width, height, radius = 25, baseDamage = 10 , baseArmor = 25;
    
    private boolean up, down, left, right, hit;
    
    private Color playerHitColor;

    public Player(String path, int width, int height) throws SlickException {
        super(95,60);
        this.maxHP = 100;
        this.duration = 130;
        this.vitesseX = 0.2f;
        this.vitesseY = 0.2f;
        anim = new Animation[8];
        
        this.width = width;
        this.height = height;
        createEntity(path, width, height);
       
    }
    

    @Override

    public void render(Graphics g) throws SlickException {
         this.box = new Rectangle(x, y, width, height);

        triggerRadius = new Circle(x + (width / 2), y + (height / 2), radius);
        
        g.drawAnimation(anim[direction + (moving ? 4 : 0)], x, y, playerHitColor);
            renderHealthBar(g);
      
        
       
        
    }

    @Override
    public void createEntity(String path, int tw, int th) throws SlickException {
        hero = new SpriteSheet(path, tw, th);
        anim[0] = AnimationLoader.loadAnimation(hero, 1, 2, 0, duration);
        anim[1] = AnimationLoader.loadAnimation(hero, 1, 2, 1, duration);
        anim[2] = AnimationLoader.loadAnimation(hero, 1, 2, 2, duration);
        anim[3] = AnimationLoader.loadAnimation(hero, 1, 2, 3, duration);
        anim[4] = AnimationLoader.loadAnimation(hero, 0, 3, 0, duration);
        anim[5] = AnimationLoader.loadAnimation(hero, 0, 3, 1, duration);
        anim[6] = AnimationLoader.loadAnimation(hero, 0, 3, 2, duration);
        anim[7] = AnimationLoader.loadAnimation(hero, 0, 3, 3, duration);
        

    }

    public void update(boolean[] keys, int d, Map map, GameContainer gc) throws SlickException {

        move(keys[0], keys[2], keys[1], keys[3], keys[9], keys[14], d, map);

        updateTrigger(d, keys[10],keys[15], this, map,gc);
        if(hitPoints<=0){
            LevelManager.setGameOver(true);
        }

    }

    public void updateTrigger(int d, boolean e,boolean f, Entity player, Map map,GameContainer gc) throws SlickException {

        if (e) {
            
            map.checkTrigger(this, map);
            
        }
        if(f){
             
             map.itemPickUp(this,map);
             
        }

    }

    public void move(boolean up, boolean down, boolean right, boolean left, boolean moving, boolean shift, int d, Map map) {
        this.moving = moving;
        if (shift) {
            vitesseX = 0.4f;
            vitesseY = 0.4f;
        } else {
            vitesseX = 0.2f;
            vitesseY = 0.2f;
        }
        if (this.moving) {
            if (up) {
                direction = 0;
                y -= vitesseY * d;

            }
            if (right) {
                direction = 1;
                x += vitesseX * d;
            }
            if (down) {
                direction = 2;
                y += vitesseY * d;
            }

            if (left) {
                direction = 3;
                x -= vitesseX * d;

            }
            
                  map.checkCollision(this);
            
          
            map.checkTriggerCollision(this);

        }

    }

    public void setHitPoints(int hitPoints) {
        this.hitPoints = hitPoints;
    }

    public void setHit(boolean hit) {
        this.hit = hit;
    }
    
    

    public boolean isHit() {
        return hit;
    }

    public Color getPlayerHitColor() {
        return playerHitColor;
    }

    public void setPlayerHitColor(Color playerHitColor) {
        this.playerHitColor = playerHitColor;
    }
    
    
    
      public String getBaseStats(){
        
        return "Player stats\n\n"
                +baseDamage+" Damage\n\n"
                +maxHP+" Health points\n\n"
                +baseArmor+" Strength\n\n";
    }
    public String getStats(Item item){
        
        return "Player stats\n\n"
                +(baseDamage+item.getDamage())+" Damage\n\n"
                +(maxHP+((item.getVitality()*maxHP)/100))+" Health points\n\n"
                +(baseArmor+(item.getArmor()))+" Strength\n\n";
    }
    
    public void getLoot(){
        
    }

    public float getX() {
        return x;
    }

    public float getY() {
        return y;
    }

    public void setX(float x) {
        this.x = x;
    }

    public void setY(float y) {
        this.y = y;
    }

    public boolean isMoving() {
        return moving;
    }

    public Circle getTriggerRadius() {
        return triggerRadius;
    }

    public float getBaseArmor() {
        return baseArmor;
    }

    public float getBaseDamage() {
        return baseDamage;
    }

    public float getMaxHP() {
        return maxHP;
    }

    public void setMaxHP(int baseHP) {
        this.maxHP = baseHP;
    }
    
    
    
    

}
