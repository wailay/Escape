/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package States;

import Entities.*;

import Graphique.Item.Item;
import Level.*;
import escape.Fenetre;

import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.*;
import org.newdawn.slick.gui.MouseOverArea;
import org.newdawn.slick.state.transition.EmptyTransition;
import org.newdawn.slick.state.transition.Transition;
import org.newdawn.slick.state.transition.VerticalSplitTransition;

/**
 *
 * @author Ayad
 */
public class StartZoneState extends BasicGameState {

    Map map;
    StartZone startMap;
    Transition t, t2;
    MouseOverArea moa;
   

    @Override
    public void init(GameContainer gc, StateBasedGame s) throws SlickException {

        map = new Map(gc);
        startMap = new StartZone(gc);
        t = new EmptyTransition();
        t2 = new VerticalSplitTransition();
        
      
    }

    boolean dbug = false;
   

    @Override
    public void render(GameContainer gc, StateBasedGame s, Graphics g) throws SlickException {


        

        g.scale(startMap.getScale(), startMap.getScale());
        g.translate(Fenetre.offsetX - map.getPlayer().getX(), Fenetre.offsetY- map.getPlayer().getY());
        
       
        

        if (map.getPlayer().getX() <= 364 && map.getPlayer().getY() <= 265) {
            startMap.setScale(4);
            Fenetre.offsetX = 128;
            Fenetre.offsetY = 96;
            map.renderLayer(g, startMap, 0);
            map.renderLayer(g, startMap, 1);
            map.renderLayer(g, startMap, 2);
            map.renderLayer(g, startMap, 3);
        } else {
            startMap.setScale(2);
            Fenetre.offsetX = 256;
            Fenetre.offsetY = 192;
            map.render(g, startMap);
        }
        map.getPlayer().render(g);
        
        for (Item item : startMap.getListeItem()) {

            item.render(g);

        }
        
           
        for (Entity en : startMap.getListeEntities()) {
            en.render(g);
        }
        
        try{
            for(Item item : map.getEquipedItem().values()){
            item.renderEquipedItem(g, map.getPlayer());
        }
            
        }catch(NullPointerException e){}
        
        
        
        
        //----------------------------
        startMap.dbug(gc, g);

    }
    boolean a = false;

    @Override

    public void update(GameContainer gc, StateBasedGame s, int d) throws SlickException {
        
       
        map.getClavier().load(gc);
        
        map.getPlayer().update(map.getClavier().keys, d, startMap,gc);
        for (Entity en : startMap.getListeEntities()) {
            en.update(d, startMap, map.getPlayer());
            
        }
        if (startMap.isPlayerTped(startMap, map.getPlayer())) {
            map.getPlayer().setX(400);
            map.getPlayer().setX(400);
            s.enterState(Etat.PRISON_ZONE_1, t, t2);
        }

        Etat.stateManager(s, gc, map.getClavier());
    }

    @Override
    public int getID() {

        return Etat.START_ZONE;
    }

}
